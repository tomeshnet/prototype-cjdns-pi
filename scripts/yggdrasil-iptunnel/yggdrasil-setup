#!/usr/bin/env bash

# Converts an ip address to binary
function convip()
{
    CONV=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})

    ip=""
    for byte in `echo ${1} | tr "." " "`; do
        ip="${ip} ${CONV[${byte}]}"
    done
    echo ${ip:1}
}
# Flip last bit of a binary string
function flipLastBit() {
    ip="$1"
    len=$(expr length $ip)
    len=$((len-1))
    #Flip last bit
    ip2=${ip:0:$len}
    if [[ "${ip:$len:1}" == "1" ]]; then
        ip2="${ip2}0"
    else
        ip2="${ip2}1"
    fi
   echo $ip2
}
function getYggPeers {
    if [[ -z "$(type jq)" ]]; then
        yggdrasil -useconffile /etc/yggdrasil.conf -normaliseconf -json | jq -r ".Peers[]"
    else
        yggdrasilctl getPeers | awk '{print $4}' | grep tcp
    fi
 }
# CJD's method of routing instead of 0.0.0.0/0  you route every other ip except the peer
# by creating multiple narrowing routes
function unroute() {
	#Convert to binary
	ip="$(convip $1 | tr -d " ")"
	#Loop through all ips narrowing scope
	for i in {1..31}
	do
	    nowip=${ip:0:$i}
	    nowip=$(flipLastBit $nowip)
	    ip1=${nowip:0:8}
	    ip2=${nowip:8:8}
	    ip3=${nowip:16:8}
	    ip4=${nowip:24:8}
	    if [[ -z "$ip1" ]]; then ip1=0; fi
	    if [[ -z "$ip2" ]]; then ip2=0; fi
	    if [[ -z "$ip3" ]]; then ip3=0; fi
	    if [[ -z "$ip4" ]]; then ip4=0; fi
	    
            ip1=$(printf '%-8s' "$ip1" | tr " " 0)
            ip2=$(printf '%-8s' "$ip2" | tr " " 0)
            ip3=$(printf '%-8s' "$ip3" | tr " " 0)
            ip4=$(printf '%-8s' "$ip4" | tr " " 0)
	    
	    ip route add $((2#$ip1)).$((2#$ip2)).$((2#$ip3)).$((2#$ip4))/$i dev "${YGGINT}"
	done
}

# Enable forwarding for ipv4 and ipv6
echo 1 > /proc/sys/net/ipv4/ip_forward
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding

# Give yggdrasil enough time to create an ygg0 interface before we start adding routes
sleep 3
if [ -f /etc/yggdrasil.iptunnel.conf ]; then 
   touch /etc/yggdrasil.iptunnel.conf
fi
IPv6NAT=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" nat)
if [[ -z "$IPv6NAT" ]]; then
    IPv6NAT=true
    confset "iptunnel" "IPv6nat" "$IPv6NAT" /etc/yggdrasil.iptunnel.conf
fi

YGGINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "general" yggdrasil-interface)"
if [[ -z "${YGGINT}" ]]; then
    YGGINT="ygg0"
fi

IPv6SUBNETINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" subnet-interface)"
if [[ -z "${IPv6SUBNETINT}" ]]; then
    IPv6SUBNETINT="wlan-ap"
fi

reroutepeers="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "general" reroutepeers)"
if [[ -z "${reroutepeers}" ]]; then
    reroutepeers=false
fi

if [ -e /etc/yggdrasil.iptunnel.server ]; then

    SUBNET4=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "iptunnel" subnet)
    if [[ -z "${SUBNET4}" ]]; then
        SUBNET4="10.10.0.0/24"
    fi
    SUBNET6=$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "ipv6tunnel" subnet)
    if [[ -z "${SUBNET6}" ]]; then
        SUBNET6="fd00::/64"
    fi
    EXITINT="$(confget -f "/etc/yggdrasil.iptunnel.conf" -s "general" exit-interface)"
    if [[ -z "${EXITINT}" ]]; then
        EXITINT="eth0"
    fi

    while read -r PUBLIC_KEY IP_ADDR IP6_ADDR IP6_SUBNET; do
        if [[ "${PUBLIC_KEY}" =~ ^[0-z]{64} ]]; then
            yggdrasilctl addRoute subnet="${IP_ADDR}/32" box_pub_key="${PUBLIC_KEY}"
            if [[ ! -z "${IP6_ADDR}" ]]; then
                yggdrasilctl addRoute subnet="${IP6_ADDR}/128" box_pub_key="${PUBLIC_KEY}"
                if [[ ! -z "${IP6_SUBNET}" ]]; then
                    yggdrasilctl addRoute subnet="${IP6_SUBNET}" box_pub_key="${PUBLIC_KEY}"
                    ip -6 route add "${IP6_SUBNET}" dev "${YGGINT}" || true
                fi
                isIPv6=true
            fi
        fi
    done < /etc/yggdrasil.iptunnel.server

    yggdrasilctl addSourceSubnet subnet="0.0.0.0/0"
    ip route add "${SUBNET4}" dev "${YGGINT}" || true

    if [[ "${isIPv6}" == true ]]; then
        yggdrasilctl addSourceSubnet subnet="::/0"
        # Add route for ygg0 interface
        ip -6 route add "${SUBNET6}" dev "${YGGINT}" || true
    fi

    # If no NAT (masquerading) being done, start doing it
    if [ -z "$(iptables -L POSTROUTING -v -n -t nat  | grep MASQUERADE)" ]; then
        iptables -t nat -A POSTROUTING -o "${EXITINT}" -j MASQUERADE
    fi
    # If no NAT (masquerading) being done, start doing it
    if [ -z "$(ip6tables -L POSTROUTING -v -n -t nat  | grep MASQUERADE)" ]; then
        if [[ ! "${IPv6NAT}" == false ]]; then
            iptables -t nat -A POSTROUTING -o "${EXITINT}" -j MASQUERADE
        fi
    fi
# Configure as Yggdrasil IPTunnel client if client file is present (this is simply a newline-separated list
# of Yggdrasil public keys in /etc/yggdrasil.iptunnel.client, each key indicating an IPTunnel exit server)
elif [ -e /etc/yggdrasil.iptunnel.client ]; then
 # Add each server to Yggdrasil IPTunnel connect-to's
     while read -r PUBLIC_KEY IP_ADDR IP6_ADDR IP6_SUBNET; do
        if [[ "${PUBLIC_KEY}" =~ ^[0-z]{64} ]]; then
            if [[ ! -z "${IP6_ADDR}" ]]; then
                ip addr add dev "${YGGINT}" "${IP6_ADDR}/128"
                yggdrasilctl addRoute subnet="::0/0" box_pub_key="${PUBLIC_KEY}"
                yggdrasilctl addSourceSubnet subnet="${IP6_ADDR}/128"
                if [[ ! -z "${IP6_SUBNET}" ]]; then
                        yggdrasilctl addSourceSubnet subnet="${IP6_SUBNET}"
                        ip -6 route add ${IP6_SUBNET} dev "${IPv6SUBNETINT}"
	                ip addr add dev "${IPv6SUBNETINT}" "$(echo  ${IP6_SUBNET} | sed "s/\/64/1/")"
                fi
            fi
            ip addr add dev "${YGGINT}" "${IP_ADDR}/32"
            yggdrasilctl addRoute subnet="0.0.0.0/0" box_pub_key="${PUBLIC_KEY}"
            yggdrasilctl addSourceSubnet subnet="${IP_ADDR}/32"
        fi
    done < /etc/yggdrasil.iptunnel.client

    # Remove NAT from eth0 if it exists
    iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE || true
    ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE || true

    # Route NAT traffic through to yggdrasil ygg0 interface to use iptunnel exit server
    iptables -t nat -A POSTROUTING -o "${YGGINT}" -j MASQUERADE
    if [[ ! "${IPv6NAT}" == false ]]; then
        ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
    fi

    # Use method of routing the tc peers to the gateway
    if [[ "${reroutepeers}" == "routepeers" ]]; then
        # Loop through peers and route them over the default gateway
	gw="$(ip r | grep default | head -n 1 | awk '{print $3}')"
	for i in "$(getYggPeers | grep tcp | awk -F : '{print $2}' | tr -d /)"
	do
            ip route add $i via $gw
        done
        ip route add 0.0.0.0/1 dev "${YGGINT}"
        ip route add 128.0.0.0/1 dev "${YGGINT}"
    elif [[ "${reroutepeers}" == "unroutepeers" ]]; then
	ip=$(getYggPeers | grep tcp | awk -F : '{print $2}' | tr -d / | head -n 1)
        unroute $ip
    else
        # Special hack to change default route without removing original one
        ip route add 0.0.0.0/1 dev "${YGGINT}"
        ip route add 128.0.0.0/1 dev "${YGGINT}"
    fi
    
    ip -6 route add ::/0 dev "${YGGINT}"
fi
