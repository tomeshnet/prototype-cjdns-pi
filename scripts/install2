#!/usr/bin/env bash

set -e

TAG_CJDNS=d2e55d58548d83940482fe1bbbe1fd36f7f1b4ef

dialogGlobalParams="--backtitle Installation --ascii-lines"
# Ask if module is to be enabled if not defined
#    askModule <Variable> <Description> [default answer]
function askModule {
    # Define standard behaviour (default yes)
    askPrompt="[Y/n]"
    nonDefaultMatch="Nn"
    defaultValue=true
    nonDefaultValue=false
    dialogParam=""

    # Define alternative behaviour (default no)
    if [ "$3" == "n" ]; then
        askPrompt="[y/N]"
        nonDefaultMatch="Yy"
        nonDefaultValue=true
        defaultValue=false
        dialogParam=" --defaultno "
    fi

    # This reads variable repersented by the string
    eval "res=\$$1"

    if [ "$(checkModule 'WITH_DIALOG')" ]; then

        # Do not stop exec on non 0 return values
        set +e
        # shellcheck disable=SC2086
        dialog $dialogGlobalParams $dialogParam --title "$2" --yesno "Install $2?" 6 55
        response=$?
        # Return to previous setting
        set -e

        case $response in
            0) res="true";;
            1) res="false";;
            255) exit;;
        esac
    else
        if [ -z "$res" ] || [ "$res" != "true" ] && [ "$res" != "false" ]; then
            read -p "Install $2 $askPrompt? " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[$nonDefaultMatch]$ ]]; then
                res=$nonDefaultValue
            else
                res=$defaultValue
            fi
        fi
    fi
    if [ "$res" == "true" ]; then
        echo -e "\e[1;32m$2 will be enabled\e[0m"
    else
        echo -e "\e[1;31m$2 will be skipped\e[0m"
    fi
    eval "$1=\$res"
}

# Check to see if module is enabled
#    checkModule <Variable>
function checkModule {
     eval "res=\$$1"
     if [ ! -z "$res" ] && [ "$res" == "true" ]; then
        echo "1"
    else
        echo ""
    fi
}

# Get board information and set flags accordingly
BOARD_FAMILY="Unknown"
BOARD_NAME="Generic"
BOARD_REVISION="?"
CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 ./do"

##TODO## Possibly use /sys/firmware/devicetree/base/model
BOARD_HARDWARE=$(grep Hardware /proc/cpuinfo | awk '{print $3}' | head -n 1)

# Flag to identify if board can support on-board AP. Default to false.
SUPPORT_HOSTAP=false
# Flag to identify if board can support on-board hardware watchdog.
SUPPORT_WATCHDOG=false

CJDNS_PACKAGE=""
CHANGE_PASSWORD=""

# If board cannot be determined from /proc/cpuinfo its most likely an arbmian board so you can use the armbian generated ID file
if [[ -z "$BOARD_HARDWARE" ]]; then
    BOARD_HARDWARE="$(grep "BOARD=" /etc/armbian-image-release | awk -F '=' '{print $2}' | tr -d \" | sed 's/Orange Pi //g')"
fi

if [[ "$BOARD_HARDWARE" == 'Allwinner' || "$BOARD_HARDWARE" == 'Generic' ]]; then
    # Stop unattended upgrade that will block apt-get requests on some armbian boards
    sudo service unattended-upgrades stop || true
    sudo killall unattended-upgrade || true
    BOARD_FAMILY="Orange Pi"
    BOARD_NAME=$(grep BOARD_NAME /etc/armbian-image-release | awk -F '=' '{print $2}' | tr -d \" | sed 's/Orange Pi //g')
    BOARD_REVISION="experimental"
    if [[ "$BOARD_NAME" == "Zero" ]]; then
        # AP is supported if board already supports XRadio
        if lsmod | grep -q xradio_wlan; then
            SUPPORT_HOSTAP=true
        fi
        SUPPORT_WATCHDOG=true
    fi
    #TODO# -O2 workaround. Needs to be resolved.
    CJDNS_BUILD_CMD="sudo Seccomp_NO=1 CFLAGS=\"-O2 -s -static -Wall -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -fomit-frame-pointer -marm\" ./do"
    CJDNS_PACKAGE="cjdns-neon-v4.deb"
elif [[ "$BOARD_HARDWARE" == 'nanopineo2' || "$BOARD_HARDWARE" == 'sun50iw1p1' ||
        "$BOARD_HARDWARE" == 'orangepizeroplus2-h5' ||
        "$BOARD_HARDWARE" == 'rock64' ||
        "$BOARD_HARDWARE" == 'Pine64+' ||
        "$BOARD_HARDWARE" == 'espressobin' ]]; then
    # Stop unattended upgrade that will block apt-get requests on some armbian boards
    sudo service unattended-upgrades stop || true
    sudo killall unattended-upgrade || true
    BOARD_FAMILY=""
    BOARD_NAME=$(grep BOARD_NAME /etc/armbian-image-release | awk -F '=' '{print $2}' | tr -d \" | sed 's/Orange Pi //g')
    BOARD_REVISION="experimental"
    CJDNS_BUILD_CMD="sudo Seccomp_NO=1 CFLAGS=\"-s -static -Wall -march=armv8-a+crc+crypto -fomit-frame-pointer\" ./do"
    if [[ "$BOARD_HARDWARE" == "orangepizeroplus2-h5" ]]; then
            SUPPORT_HOSTAP=true
    fi
else
    BOARD_FAMILY="Raspberry Pi"
    BOARD_REVISION="$(sed -rn 's/Revision\s+\:\s+([0-9a-z_\-\s\,\(\)]+)/\1/p' /proc/cpuinfo)"
    
    # Check for default password is still set for user pi
    # If it is force password before reboot
    # shellcheck disable=SC2016
   
    # shellcheck disable=SC2143,SC2086
    CHANGE_PASSWORD="pi"

    if [[ $BOARD_REVISION == *"900092"* || $BOARD_REVISION == *"900093"* || $BOARD_REVISION == *"9000c1"* ]]; then
        BOARD_NAME="Zero"
        CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 NO_TEST=1 CFLAGS=\"-s -mfpu=vfp -O2\" ./do"
    elif [[ $BOARD_REVISION == *"00"* ]]; then
        BOARD_NAME="1"
        CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 NO_TEST=1 CFLAGS=\"-s -static -Wall\" ./do"
    elif [[ $BOARD_REVISION == *"a01041"* || $BOARD_REVISION == *"a21041"* ]]; then
        BOARD_NAME="2"
        CJDNS_BUILD_CMD="sudo NO_TEST=1 CFLAGS=\"-mfpu=neon-vfpv4 -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon-v4.deb"
    elif [[ $BOARD_REVISION == *"a02082"* || $BOARD_REVISION == *"a22082"* ]]; then
        BOARD_NAME="3"
        CJDNS_BUILD_CMD="sudo CFLAGS=\"-march=armv8-a+crc -mtune=cortex-a53 -mfpu=crypto-neon-fp-armv8 -mfloat-abi=hard -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon-v4.deb"
        # Raspberry Pi 3 has on-board WiFi that can be used as an AP
        SUPPORT_HOSTAP=true
        # Raspberry Pi 3 has hardware watchdog
        SUPPORT_WATCHDOG=true
    elif [[ $BOARD_REVISION == *"a020d3"* ]]; then
        BOARD_NAME="3b+"
        CJDNS_BUILD_CMD="sudo CFLAGS=\"-march=armv8-a+crc -mtune=cortex-a53 -mfpu=crypto-neon-fp-armv8 -mfloat-abi=hard -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon-v4.deb"
        # Raspberry Pi 3 has on-board WiFi that can be used as an AP
        SUPPORT_HOSTAP=true
        # Raspberry Pi 3 has hardware watchdog
        SUPPORT_WATCHDOG=true
    fi
fi

echo -e "\e[1;32mStarting installation on ${BOARD_FAMILY} ${BOARD_NAME} (${BOARD_REVISION})...\e[0m"

# Normalize OS environment

# Enable password-less sudo on Armbian
sudo sed -i 's/ALL=(ALL:ALL) ALL/ALL=(ALL:ALL) NOPASSWD:ALL/' /etc/sudoers

# Disable predictable network interface naming
sudo touch /etc/udev/rules.d/80-net-setup-link.rules

# Check for broken interface file, create if broken
if [ ! -e "/etc/network/interfaces" ] ; then
  rm /etc/network/interfaces || true
  echo "auto lo" | sudo tee /etc/network/interfaces > /dev/null
  echo "iface lo inet loopback" | sudo tee --append /etc/network/interfaces > /dev/null
fi

# Disable NetworkManager management of wlan0 so it doesn't pause it to scan every 60 seconds
if [[ -e '/etc/NetworkManager/NetworkManager.conf' ]]; then
    if ! grep -q "\[keyfile\]" /etc/NetworkManager/NetworkManager.conf; then
        echo "[keyfile]" | sudo tee --append /etc/NetworkManager/NetworkManager.conf > /dev/null
        echo "unmanaged-devices=interface-name:wlan0" | sudo tee --append /etc/NetworkManager/NetworkManager.conf > /dev/null
    fi
 fi

# Detect missing /sbin from $PATH variable on Debian distros, and add it
if ! echo "$PATH" | grep -q "/sbin" ; then
    # Current environment
    export PATH="/sbin:/usr/sbin:$PATH"
    # Next login
    echo "export PATH=\"/sbin:/usr/sbin:$PATH\"" | sudo tee -a /etc/profile
fi

askModule "WITH_DIALOG" "Text User Interface?" "n"
if [ "$(checkModule 'WITH_DIALOG')" ]; then
    sudo apt-get install dialog -y
fi

# Prompt and set missing flags

# Prompt for name of the mesh network
##TODO## Add dialog option
read -p "Enter the name of your mesh network (default: tomesh): " -r
MESH_NAME="${REPLY// }"
if [ "${#MESH_NAME}" == 0 ]; then
    MESH_NAME="tomesh"
fi
export MESH_NAME

askModule "WITH_YGGDRASIL" "Yggdrasil routing engine"

askModule "WITH_MESH_POINT" "Mesh Point Interface"
if [ "$WITH_MESH_POINT" == false ]; then
    askModule "WITH_AD_HOC" "Ad-Hoc Interface"
fi
if [ "$SUPPORT_HOSTAP" == "true" ]; then
    askModule "WITH_WIFI_AP" "WiFi Access Point"
fi
askModule "WITH_FIREWALL" "Basic Firewall"
askModule "WITH_CJDNS_IPTUNNEL" "Internet Gateway"
askModule "WITH_IPFS" "IPFS"
if [ "$WITH_IPFS" == true ] && [ "$BOARD_FAMILY" == "Raspberry Pi" ]; then
    askModule "WITH_IPFS_PI_STREAM" "IPFS Pi Stream" "n"
fi
askModule "WITH_SSB" "SSB"
if [ "$WITH_SSB" == "true" ]; then
    askModule "WITH_SSB_PATCHFOO" "SSB PatchFoo Web Client"
    askModule "WITH_SSB_WEB_PI" "SSB Web Pi Client (Experimental)" "n"
fi
askModule "WITH_YRD" "Yrd (a cjdns command-line tool)"
askModule "WITH_PROMETHEUS_NODE_EXPORTER" "Prometheus Node Exporter"
if [ "$WITH_PROMETHEUS_NODE_EXPORTER" == true ]; then
    askModule "WITH_PROMETHEUS_SERVER" "Prometheus Server"
fi
if [ "$WITH_PROMETHEUS_SERVER" == true ]; then
    askModule "WITH_GRAFANA" "Grafana"
fi
askModule "WITH_H_DNS" "Hyperboria Domain Name Servers"
askModule "WITH_H_NTP" "Hyperboria Network Time Protocol Server"
askModule "WITH_EXTRA_TOOLS" "Non-Essential Tools Useful for Network Analysis"
if [ "$SUPPORT_WATCHDOG" == "true" ]; then
    askModule "WITH_WATCHDOG" "Hardware Watchdog"
fi

# Get tools
if ! [ "$(which nodejs)" ]; then
    # Check for armv6 and install nodejs manually instead since it will not install via repo
    if uname -m | grep -Eq ^armv6; then
        wget -O /tmp/node-v6.11.0-linux-armv6l.tar.gz https://nodejs.org/dist/v6.11.0/node-v6.11.0-linux-armv6l.tar.gz
        sudo tar xfz /tmp/node-v6.11.0-linux-armv6l.tar.gz --strip 1 -C /
        rm -rf /tmp/node-v6.11.0-linux-armv6l.tar.gz
        sudo ln -s /bin/node /bin/nodejs
    else
       curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
       sudo apt-get install nodejs -y
   fi
fi

# Install possibly missing tools
sudo apt-get install haveged -y || true

# Check if cjdns is to be compiled or downloaded
if [[ ! -e "/usr/bin/cjdroute" ]]; then
    if [ ! -z "$CJDNS_PACKAGE" ]; then
        read -p "Compile cjdns from source (Y) or use $CJDNS_PACKAGE Debian package (n)?" -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            CJDNS_PACKAGE="";
        fi
    fi
fi

if [ ! -z "$CJDNS_PACKAGE" ]; then
    if ! [ -x "/opt/cjdns/cjdroute" ]; then
        echo -e "\e[1;31mInstalling cjdns debian package\e[0m"
        wget https://github.com/darkdrgn2k/ToMeshPackages/raw/master/CJDNS/$CJDNS_PACKAGE -O /tmp/cjdns.deb
        sudo dpkg -i /tmp/cjdns.deb
        #Link up folder so files are in the same place as compiled
        if [[ -e "/opt/cjdns" ]]; then
            sudo rm -rf /opt/cjdns
        fi
        sudo ln -s /usr/share/cjdns /opt/cjdns
        sudo ln -s /usr/bin/cjdroute /opt/cjdns/cjdroute || true
    fi
else
    # Download cjdns repo and checkout TAG_CJDNS tag
    echo -e "\e[1;31mCompiling cjdns from source\e[0m"
    if ! [ -d "/opt/cjdns" ]; then
        sudo apt-get install -y python
        here="$(pwd)"
        sudo git clone https://github.com/cjdelisle/cjdns.git /opt/cjdns
        cd /opt/cjdns
        sudo git checkout $TAG_CJDNS
        cd "$here"
    fi

    # Build cjdns
    if ! [ -x "/opt/cjdns/cjdroute" ]; then
        here="$(pwd)"
        cd /opt/cjdns && eval "$CJDNS_BUILD_CMD" && cd "$here"
    fi

    # Install cjdns to /usr/bin
    sudo rm -f /usr/bin/cjdroute
    sudo cp /opt/cjdns/cjdroute /usr/bin/cjdroute

    # Generate cjdns configurations
    if ! [ -f "/etc/cjdroute.conf" ]; then
        sudo /usr/bin/cjdroute --genconf | sudo tee --append /etc/cjdroute.conf > /dev/null
    fi

    # Configure systemd to start cjdns.service on system boot
    sudo cp /opt/cjdns/contrib/systemd/cjdns.service /etc/systemd/system/cjdns.service
    sudo chmod 644 /etc/systemd/system/cjdns.service
    sudo cp /opt/cjdns/contrib/systemd/cjdns-resume.service /etc/systemd/system/cjdns-resume.service
    sudo chmod 644 /etc/systemd/system/cjdns-resume.service
    sudo systemctl daemon-reload
fi

sudo systemctl enable cjdns.service

# Define new hostname
NEWHOSTNAME=$(sudo grep -m 1 '"ipv6"' /etc/cjdroute.conf | awk '{ print $2 }' | sed 's/[",]//g' | sed "s/.*:/$MESH_NAME-/g")
export NEWHOSTNAME

# Install nginx
source nginx/install

# Install yggdrasil
if [ "$(checkModule 'WITH_YGGDRASIL')" ]; then
    source yggdrasil/install
fi

# 802.11s Mesh Point interface
if [ "$(checkModule 'WITH_MESH_POINT')" ]; then
    source mesh-point/install
fi

# IBSS Ad-hoc interface
if [ "$(checkModule 'WITH_AD_HOC')" ]; then
    source mesh-adhoc/install
fi

# WiFi Access Point on supported boards
if [ "$SUPPORT_HOSTAP" == "true" ] && [ "$(checkModule 'WITH_WIFI_AP')" ]; then
    source hostapd/install
fi

# Configure Internet firewall
if [ "$(checkModule 'WITH_FIREWALL')" ]; then
    source firewall/install
fi

# Configure Internet gateway using cjdns iptunnel
if [ "$(checkModule 'WITH_CJDNS_IPTUNNEL')" ]; then
    source cjdns-iptunnel/install
fi

# IPFS
if [ ! -x "$(command -v ipfs)" ] && [ "$(checkModule 'WITH_IPFS')" ]; then
    source ipfs/install
fi

# IPFS Pi Stream
if [ ! -x "$(command -v process-stream.sh)" ] && [ "$(checkModule 'WITH_IPFS_PI_STREAM')" ]; then
    source ipfs-pi-stream/install
fi

# SSB
if [ ! -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB')" ]; then
    source ssb/install
fi

# SSB patchfoo (only install if sbot exists)
if [ -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB_PATCHFOO')" ]; then
    source ssb-patchfoo/install
fi

# SSB Web (only install if sbot exists)
if [ -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB_WEB_PI')" ]; then
    source ssb-web-pi/install
fi

# yrd
if [ ! -x "$(command -v yrd)" ] && [ "$(checkModule 'WITH_YRD')" ]; then
    source yrd/install
fi

# Prometheus Node Exporter
if [ ! -x "$(command -v node_exporter)" ] && [ "$(checkModule 'WITH_PROMETHEUS_NODE_EXPORTER')" ]; then
    source prometheus-node-exporter/install
fi

# Prometheus Server
if [ ! -x "$(command -v /opt/prometheus/prometheus)" ] && [ "$(checkModule 'WITH_PROMETHEUS_SERVER')" ]; then
    source prometheus-server/install
fi

# Grafana
if [ ! -x "$(command -v /usr/sbin/grafana-server)" ] && [ "$(checkModule 'WITH_GRAFANA')" ]; then
    source grafana/install
fi

# Configure Hyperboria DNS
if [ "$(checkModule 'WITH_H_DNS')" ]; then
    source h-dns/install
fi

# Configure Hyperboria NTP
if [ "$(checkModule 'WITH_H_NTP')" ]; then
    source h-ntp/install
fi

# Non-essential extra tools
if [ "$(checkModule 'WITH_EXTRA_TOOLS')" ]; then
    source extra-tools/install
fi

# Watchdog on supported boards
if [ "$SUPPORT_WATCHDOG" == "true" ] && [ "$(checkModule 'WITH_WATCHDOG')" ]; then
    source watchdog/install
fi

# Install node status script
sudo cp status /usr/local/bin/status
echo -e "Run \e[1;32mstatus\e[0m anytime to print the status of your node"

# Install nodeinfo
source shared/nodeinfo/install

# Print node status on login
cp ~/.profile ~/.bash_profile
{
    echo ""
    echo "# export mesh network name"
    echo "export MESH_NAME=$MESH_NAME"
    echo ""
    echo "# print mesh node status"
    echo "status"
} >> ~/.bash_profile
# Rename node based on cjdns address
oldhostname=$(hostname)
sudo echo "$NEWHOSTNAME" | sudo tee /etc/hostname > /dev/null
sudo sed -i -e "s/$oldhostname/$NEWHOSTNAME/" /etc/hosts

if [[ "$CHANGE_PASSWORD" == "pi" ]]; then
    sudo passwd -e "$CHANGE_PASSWORD"
    echo -e "You will need to change the password next login."
fi

echo -e ""
echo -e "Your node's new hostname is $NEWHOSTNAME"
echo -e ""
read -p "Installation complete. Press any key to reboot your new node. " -n 1 -r

# Reboot device
sudo reboot
