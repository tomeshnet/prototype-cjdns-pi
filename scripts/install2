#!/usr/bin/env bash
# shellcheck disable=SC2034
true
set -e

# Enable password-less sudo on Armbian
sudo sed -i 's/ALL=(ALL:ALL) ALL/ALL=(ALL:ALL) NOPASSWD:ALL/' /etc/sudoers

# Common functions
source functions.sh

# Normalize OS environment
# True required to avoid odd armbian bug.  Update does work but reports missing file.
sudo apt-get update -y || true

# Dependencies
sudo apt-get install -y gcc make curl wget
sudo apt-get install -y net-tools || true

# Get board information and set flags accordingly
detectBoard;

# Flag to identify if board can support on-board AP. Default to false.
SUPPORT_HOSTAP=false
# Flag to identify if board can support on-board hardware watchdog.
SUPPORT_WATCHDOG=false

case "$BOARD_MODEL" in
    orangepizero)
        # AP is supported if board already supports XRadio
        if lsmod | grep -q xradio_wlan; then
            SUPPORT_HOSTAP=true
        fi
        SUPPORT_WATCHDOG=true
    ;;
    orangepilite)
        SUPPORT_HOSTAP=true
        SUPPORT_WATCHDOG=true
    ;;
    orangepizeroplus2-h5)
        SUPPORT_HOSTAP=true
    ;;
    "raspberrypi3")
        # Raspberry Pi 3 has on-board WiFi that can be used as an AP
        SUPPORT_HOSTAP=true
        # Raspberry Pi 3 has hardware watchdog
        SUPPORT_WATCHDOG=true
    ;;
    "raspberrypi2")
    ;;
    "raspberrypi1")
    ;;
    "raspberrypizero")
    ;;
esac

case "$BOARD_OS" in
    Armbian)
        # Install Armbian WIFI Drivers
        sudo apt-get install -y armbian-firmware-full  2> /dev/null || true
    ;;
    Raspbian)
        CHANGE_PASSWORD="pi"
    ;;
esac
echo -e "\e[1;32mStarting installation on ${BOARD_NAME} (${BOARD_MODEL})...\e[0m"

# Disable predictable network interface naming
sudo touch /etc/udev/rules.d/80-net-setup-link.rules

# Disable renaming of interfaces on boot via grub 
if [ -f "/etc/default/grub" ]; then
	sudo sed -i "s/GRUB_CMDLINE_LINUX=\"\"/GRUB_CMDLINE_LINUX=\"net.ifnames=0 biosdevname=0\"/" /etc/default/grub
	sudo grub-mkconfig -o /boot/grub/grub.cfg
fi

# Remove Network Manager and create standard config settings
sudo apt-get remove -y network-manager
sudo systemctl daemon-reload
echo "source /etc/network/interfaces.d/*" | sudo tee /etc/network/interfaces
echo allow-hotplug eth0 | sudo tee /etc/network/interfaces.d/eth0 > /dev/null 
echo iface eth0 inet dhcp | sudo tee --append /etc/network/interfaces.d/eth0 >> /dev/null
echo "auto lo" | sudo tee /etc/network/interfaces.d/lo > /dev/null
echo "iface lo inet loopback" | sudo tee --append /etc/network/interfaces.d/lo >> /dev/null

# Detect missing /sbin from $PATH variable on Debian distros, and add it
if ! echo "$PATH" | grep -q "/sbin" ; then
    # Current environment
    export PATH="/sbin:/usr/sbin:$PATH"
    # Next login
    echo "export PATH=\"/sbin:/usr/sbin:$PATH\"" | sudo tee -a /etc/profile
fi

askModule "WITH_DIALOG" "Dialog ASCII User Interface?" "n"
if [ "$(checkModule 'WITH_DIALOG')" ]; then
    sudo apt-get install dialog -y
fi

askSelection "Select node install type" "A Basic node\nB IPFS Node\nC Monitor Node\nD SSB Node\nE Camera Node\nF Raspberry Pi Adhoc (Experimental)\nZ Custom Node"

case "$dialogREPLY" in
    "A")
        echo "Basic node"
	WITH_CJDNS=true
        WITH_YGGDRASIL=true
        WITH_YGGDRASIL_IPTUNNEL=true
        WITH_MESH_POINT=""
        WITH_WIFI_AP=""
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=false
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=false
        WITH_GRAFANA=false
        WITH_SSB=false
        WITH_SSB_WEB=false
        WITH_IPFS_PI_STREAM=false
    ;;
    "B")
        echo "Basic IPFS node"
	WITH_CJDNS=true
        WITH_YGGDRASIL=true
        WITH_YGGDRASIL_IPTUNNEL=true
        WITH_MESH_POINT=""
        WITH_WIFI_AP=""
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=true
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=false
        WITH_GRAFANA=false
        WITH_SSB=false
        WITH_SSB_WEB=false
        WITH_IPFS_PI_STREAM=false
    ;;
    "C")
        echo "Monitor Node"
	WITH_CJDNS=true
        WITH_YGGDRASIL=true
        WITH_YGGDRASIL_IPTUNNEL=true
        WITH_MESH_POINT=""
        WITH_WIFI_AP=""
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=false
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=true
        WITH_GRAFANA=true
        WITH_SSB=false
        WITH_SSB_WEB=false
        WITH_IPFS_PI_STREAM=false
    ;;
    "D")
        echo "SSB Node"
	WITH_CJDNS=true
        WITH_YGGDRASIL=true
        WITH_YGGDRASIL_IPTUNNEL=true
        WITH_MESH_POINT=""
        WITH_WIFI_AP=""
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=false
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=false
        WITH_GRAFANA=false
        WITH_SSB=true
        WITH_SSB_PATCHFOO=true
        WITH_IPFS_PI_STREAM=false
    ;;
    "E")
        echo "IPFS Camera Node"
	WITH_CJDNS=true
        WITH_YGGDRASIL=true
        WITH_YGGDRASIL_IPTUNNEL=true
        WITH_MESH_POINT=""
        WITH_WIFI_AP=""
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=true
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=false
        WITH_GRAFANA=false
        WITH_SSB=false
        WITH_SSB_PATCHFOO=false
        WITH_IPFS_PI_STREAM=true
    ;;
    "F")
        echo "Raspberry Pi Ad-Hoc"
	WITH_CJDNS=true
	WITH_YGGDRASIL=true
        WITH_MESH_POINT=false
	WITH_AD_HOC=true
        WITH_WIFI_AP=false
        WITH_FIREWALL=true
        WITH_CJDNS_IPTUNNEL=true
        WITH_IPFS=false
        WITH_PROMETHEUS_NODE_EXPORTER=true
        WITH_EXTRA_TOOLS=true
        WITH_WATCHDOG=true
        WITH_YRD=true
        WITH_PROMETHEUS_SERVER=false
        WITH_GRAFANA=false
        WITH_SSB=false
        WITH_SSB_PATCHFOO=false
        WITH_IPFS_PI_STREAM=false
    ;;
    "Z")
    ;;
    *)
        echo "Error unknown response $dialogREPLY"
        exit
    ;;
esac

# Prompt and set missing flags

# Install confset
source shared/confset/install

# Prompt for name of the mesh network
##TODO## Add dialog option
read -p "Enter the name of your mesh network (default: tomesh): " -r
MESH_NAME="${REPLY// }"
if [ "${#MESH_NAME}" == 0 ]; then
    MESH_NAME="tomesh"
fi

sudo confset general mesh-name "$MESH_NAME" /etc/mesh.conf

askModule "WITH_CJDNS" "CJDNS routing engine"
if [ "$WITH_CJDNS" == "true" ]; then
    askModule "WITH_CJDNS_IPTUNNEL" "Internet Gateway over CJDNS"
    askModule "WITH_H_DNS" "Hyperboria Domain Name Servers"
    askModule "WITH_H_NTP" "Hyperboria Network Time Protocol Server"   
    askModule "WITH_YRD" "Yrd (a cjdns command-line tool)"
fi
askModule "WITH_YGGDRASIL" "Yggdrasil routing engine"
if [ "$WITH_YGGDRASIL" == "true" ]; then
    askModule "WITH_YGGDRASIL_IPTUNNEL" "Internet Gateway over Yggdrasil"
fi

askModule "WITH_MESH_POINT" "Mesh Point Interface"
if [ "$WITH_MESH_POINT" == false ]; then
    askModule "WITH_AD_HOC" "Ad-Hoc Interface"
fi
if [ "$SUPPORT_HOSTAP" == "true" ]; then
    askModule "WITH_WIFI_AP" "WiFi Access Point"
fi
askModule "WITH_FIREWALL" "Basic Firewall"
askModule "WITH_IPFS" "IPFS"
if [ "$WITH_IPFS" == true ] && [ "$BOARD_FAMILY" == "Raspberry Pi" ]; then
    askModule "WITH_IPFS_PI_STREAM" "IPFS Pi Stream" "n"
fi
askModule "WITH_SSB" "SSB"
if [ "$WITH_SSB" == "true" ]; then
    askModule "WITH_SSB_PATCHFOO" "SSB PatchFoo Web Client"
    askModule "WITH_SSB_WEB_PI" "SSB Web Pi Client (Experimental)" "n"
fi
askModule "WITH_PROMETHEUS_NODE_EXPORTER" "Prometheus Node Exporter"
if [ "$WITH_PROMETHEUS_NODE_EXPORTER" == true ]; then
    askModule "WITH_PROMETHEUS_SERVER" "Prometheus Server"
fi
if [ "$WITH_PROMETHEUS_SERVER" == true ]; then
    askModule "WITH_GRAFANA" "Grafana"
fi
askModule "WITH_EXTRA_TOOLS" "Non-Essential Tools Useful for Network Analysis"
askModule "WITH_EXTRA_NETCAT" "Replacement netcat that supports IPv6"
if [ "$SUPPORT_WATCHDOG" == "true" ]; then
    askModule "WITH_WATCHDOG" "Hardware Watchdog"
fi

# Install possibly missing tools
sudo apt-get install haveged -y || true

# Install nginx
source nginx/install

# Install CJDNS
if [ "$(checkModule 'WITH_CJDNS')" ]; then
    source cjdns/install
fi

# Install Yggdrasil
if [ "$(checkModule 'WITH_YGGDRASIL')" ]; then
    source yggdrasil/install
fi

# Set hostname nodeinfo
source shared/hostname/install

# 802.11s Mesh Point interface
if [ "$(checkModule 'WITH_MESH_POINT')" ]; then
    source mesh-point/install
fi

# IBSS Ad-hoc interface
if [ "$(checkModule 'WITH_AD_HOC')" ]; then
    source mesh-adhoc/install
fi

# WiFi Access Point on supported boards
if [ "$SUPPORT_HOSTAP" == "true" ] && [ "$(checkModule 'WITH_WIFI_AP')" ]; then
    source hostapd/install
fi

# Configure Internet firewall
if [ "$(checkModule 'WITH_FIREWALL')" ]; then
    source firewall/install
fi

# Configure Internet gateway using cjdns iptunnel
if [ "$(checkModule 'WITH_CJDNS_IPTUNNEL')" ]; then
    source cjdns-iptunnel/install
fi
# Configure Internet gateway using Yggdrasil IPTunnel
if [ "$(checkModule 'WITH_YGGDRASIL_IPTUNNEL')" ]; then
    source yggdrasil-iptunnel/install
fi

# IPFS
if [ ! -x "$(command -v ipfs)" ] && [ "$(checkModule 'WITH_IPFS')" ]; then
    source ipfs/install
fi

# IPFS Pi Stream
if [ ! -x "$(command -v process-stream.sh)" ] && [ "$(checkModule 'WITH_IPFS_PI_STREAM')" ]; then
    source ipfs-pi-stream/install
fi

# SSB
if [ ! -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB')" ]; then
    source ssb/install
fi

# SSB patchfoo (only install if sbot exists)
if [ -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB_PATCHFOO')" ]; then
    source ssb-patchfoo/install
fi

# SSB Web (only install if sbot exists)
if [ -x "$(command -v sbot)" ] && [ "$(checkModule 'WITH_SSB_WEB_PI')" ]; then
    source ssb-web-pi/install
fi

# yrd
if [ ! -x "$(command -v yrd)" ] && [ "$(checkModule 'WITH_YRD')" ]; then
    source yrd/install
fi

# Prometheus Node Exporter
if [ ! -x "$(command -v node_exporter)" ] && [ "$(checkModule 'WITH_PROMETHEUS_NODE_EXPORTER')" ]; then
    source prometheus-node-exporter/install
fi

# Prometheus Server
if [ ! -x "$(command -v /opt/prometheus/prometheus)" ] && [ "$(checkModule 'WITH_PROMETHEUS_SERVER')" ]; then
    source prometheus-server/install
fi

# Grafana
if [ ! -x "$(command -v /usr/sbin/grafana-server)" ] && [ "$(checkModule 'WITH_GRAFANA')" ]; then
    source grafana/install
fi

# Configure Hyperboria DNS
if [ "$(checkModule 'WITH_H_DNS')" ]; then
    source h-dns/install
fi

# Configure Hyperboria NTP
if [ "$(checkModule 'WITH_H_NTP')" ]; then
    source h-ntp/install
fi

# Non-essential extra tools
if [ "$(checkModule 'WITH_EXTRA_TOOLS')" ]; then
    source extra-tools/install
fi

# Non-essential extra tools - netcat replacemnet
if [ "$(checkModule 'WITH_EXTRA_NETCAT')" ]; then
    source extra-tools-netcat/install
fi

# Watchdog on supported boards
if [ "$SUPPORT_WATCHDOG" == "true" ] && [ "$(checkModule 'WITH_WATCHDOG')" ]; then
    source watchdog/install
fi

# Install nodeinfo
source shared/nodeinfo/install

# Print node status on login
cp ~/.profile ~/.bash_profile
{
    echo ""
    echo "# export mesh network name"
    echo "export MESH_NAME=$(confget -f /etc/mesh.conf -s general "mesh-name")"
    echo ""
    echo "# print mesh node status"
    echo "status"
} >> ~/.bash_profile

# Install node status script
sudo cp status /usr/local/bin/status
echo -e "Run \e[1;32mstatus\e[0m anytime to print the status of your node"

if [[ "$CHANGE_PASSWORD" == "pi" ]]; then
    sudo passwd -e "$CHANGE_PASSWORD"
    echo -e "You will need to change the password next login."
fi

echo -e ""
echo -e "Your node's new hostname is $(cat /etc/hostname)"
echo -e ""
read -p "Installation complete. Press any key to reboot your new node. " -n 1 -r

# Reboot device
sudo reboot
