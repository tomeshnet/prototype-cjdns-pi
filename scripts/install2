#!/usr/bin/env bash

set -e

TAG_CJDNS=186169f9a8631633795e4e9d70c501519a7800f4

# Get board information and set flags accordingly
BOARD_FAMILY="Unknown"
BOARD_NAME="Generic"
BOARD_REVISION="?"
CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 ./do"

##TODO## Possibly use /sys/firmware/devicetree/base/model
BOARD_HARDWARE=$(cat /proc/cpuinfo | grep Hardware | awk '{print $3}' | head -n 1)

# Flag to identify if board can support on-board AP. Default to false.
SUPPORT_HOSTAP=false
SUPPORT_WATCHDOG=false
CJDNS_PACKAGE=""

# If board cannot be determined from /proc/cpuinfo its most likely an arbmian board so you can use the armbian generated ID file
if [[ -z "$BOARD_HARDWARE" ]]; then
    BOARD_HARDWARE="$(grep "BOARD=" /etc/armbian-image-release | awk -F \= '{print $2}' | tr -d \" | sed 's/Orange Pi //g')"
fi

if [[ "$BOARD_HARDWARE" == 'Allwinner' || "$BOARD_HARDWARE" == 'Generic' ]]; then
    # Stop unattended upgrade that will block apt-get requests on some armbian boards
    sudo service unattended-upgrades stop || true
    sudo killall unattended-upgrade || true
    BOARD_FAMILY="Orange Pi"
    BOARD_NAME=$(grep BOARD_NAME /etc/armbian-image-release | awk -F \= '{print $2}' | tr -d \" | sed 's/Orange Pi //g')
    BOARD_REVISION="experimental"
    if [[ "$BOARD_NAME" == "Zero" ]]; then
        # AP is supported if board already supports XRadio
        if [ "$(lsmod | grep xradio_wlan)" ]; then 
            SUPPORT_HOSTAP=true
        fi
        SUPPORT_WATCHDOG=true
    fi
    CJDNS_BUILD_CMD="sudo Seccomp_NO=1 CFLAGS=\"-s -static -Wall -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard -fomit-frame-pointer -marm\" ./do"
    CJDNS_PACKAGE="cjdns-neon.deb"
elif [[ "$BOARD_HARDWARE" == 'nanopineo2' ||
        "$BOARD_HARDWARE" == 'orangepizeroplus2-h5' ||
        "$BOARD_HARDWARE" == 'rock64' ||
        "$BOARD_HARDWARE" == 'espressobin' ]]; then
    # Stop unattended upgrade that will block apt-get requests on some armbian boards
    sudo service unattended-upgrades stop || true
    sudo killall unattended-upgrade || true
    BOARD_FAMILY=""
    BOARD_NAME=$(grep BOARD_NAME /etc/armbian-image-release | awk -F \= '{print $2}' | tr -d \" | sed 's/Orange Pi //g')
    BOARD_REVISION="experimental"
    CJDNS_BUILD_CMD="sudo Seccomp_NO=1 CFLAGS=\"-s -static -Wall -march=armv8-a+crc+crypto -fomit-frame-pointer\" ./do"
    if [[ "$BOARD_HARDWARE" == "orangepizeroplus2-h5" ]]; then
            SUPPORT_HOSTAP=true
    fi
else
    BOARD_FAMILY="Raspberry Pi"
    BOARD_REVISION=`sed -rn 's/Revision\s+\:\s+([0-9a-z_\-\s\,\(\)]+)/\1/p' /proc/cpuinfo`
    if [[ $BOARD_REVISION == *"900092"* || $BOARD_REVISION == *"900093"* || $BOARD_REVISION == *"9000c1"* ]]; then
        BOARD_NAME="Zero"
        CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 NO_TEST=1 CFLAGS=\"-s -mfpu=vfp -O2\" ./do"
    elif [[ $BOARD_REVISION == *"00"* ]]; then
        BOARD_NAME="1"
        CJDNS_BUILD_CMD="sudo Seccomp_NO=1 NO_NEON=1 NO_TEST=1 CFLAGS=\"-s -static -Wall\" ./do"
    elif [[ $BOARD_REVISION == *"a01041"* || $BOARD_REVISION == *"a21041"* ]]; then
        BOARD_NAME="2"
        CJDNS_BUILD_CMD="sudo NO_TEST=1 CFLAGS=\"-mfpu=neon-vfpv4 -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon.deb"
    elif [[ $BOARD_REVISION == *"a02082"* || $BOARD_REVISION == *"a22082"* ]]; then
        BOARD_NAME="3"
        CJDNS_BUILD_CMD="sudo CFLAGS=\"-march=armv8-a+crc -mtune=cortex-a53 -mfpu=crypto-neon-fp-armv8 -mfloat-abi=hard -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon.deb"
        # Raspberry Pi 3 has on-board WiFi that can be used as an AP        
        SUPPORT_HOSTAP=true
        # Raspberry Pi 3 has hardware watchdog
        SUPPORT_WATCHDOG=true
    elif [[ $BOARD_REVISION == *"a020d3"* ]]; then
        BOARD_NAME="3b+"
        CJDNS_BUILD_CMD="sudo CFLAGS=\"-march=armv8-a+crc -mtune=cortex-a53 -mfpu=crypto-neon-fp-armv8 -mfloat-abi=hard -O2\" ./do"
        CJDNS_PACKAGE="cjdns-neon.deb"
        # Raspberry Pi 3 has on-board WiFi that can be used as an AP
        SUPPORT_HOSTAP=true
        # Raspberry Pi 3 has hardware watchdog
        SUPPORT_WATCHDOG=true        
    fi
fi

echo -e "\e[1;32mStarting installation on ${BOARD_FAMILY} ${BOARD_NAME} (${BOARD_REVISION})...\e[0m"

# Enable password-less sudo on Armbian
sudo sed -i 's/ALL=(ALL:ALL) ALL/ALL=(ALL:ALL) NOPASSWD:ALL/' /etc/sudoers

# Disable predictable network interface naming
sudo touch /etc/udev/rules.d/80-net-setup-link.rules

# Check for broken interface file, create if broken
if [ ! -e "/etc/network/interfaces" ] ; then
  rm /etc/network/interfaces || true
  echo "auto lo" | sudo tee /etc/network/interfaces > /dev/null
  echo "iface lo inet loopback" | sudo tee --append /etc/network/interfaces > /dev/null  
fi

# Disable NetworkManager management of wlan0 so it doesn't pause it to scan every 60 seconds
if [[ -e '/etc/NetworkManager/NetworkManager.conf' ]]; then
    if [[ -z "$(grep "\[keyfile\]" /etc/NetworkManager/NetworkManager.conf)" ]]; then
        echo "[keyfile]" | sudo tee --append /etc/NetworkManager/NetworkManager.conf > /dev/null
        echo "unmanaged-devices=interface-name:wlan0" | sudo tee --append /etc/NetworkManager/NetworkManager.conf > /dev/null
    fi
 fi

# Set configurations specific to the board
if [[ $BOARD_FAMILY == "Orange Pi" ]]; then
    ##TODO## This can be removed soon as its no longer relevant with the latest images.
    # Downgrade kernel to enable XRadio in version 4.10 on Orange Pi Zero
    if ! [ -z "`uname -a | grep 4.11`" ]; then 
        if ! [ -z "`cat /sys/bus/mmc/devices/mmc1:0001/mmc1:0001:1/uevent | grep SDIO_ID | grep 0020:2281`" ]; then
            read -p "Downgrade kernel to enable XRadio on Orange Pi Zero (Y/n)? " -n 1 -r
            echo ""
            if ! [[ $REPLY =~ ^[Nn]$ ]]; then
                echo -e "\e[1;32mDowngrading Kernel...\e[0m"
                wget https://github.com/darkdrgn2k/OrangePiXRadio/raw/master/linux-image-dev-sun8i_5.26_armhf.deb
                sudo dpkg -i linux-image-dev-sun8i_5.26_armhf.deb
                rm -rf linux-image-dev-sun8i_5.26_armhf.deb

                # AP supported on downgraded kernel
                SUPPORT_HOSTAP=true 
            else
                # AP not supported without kernel downgrade
                SUPPORT_HOSTAP=false 
            fi
        fi
    fi
fi

# Prompt and set missing flags
if [ -z "$WITH_MESH_POINT" -o "$WITH_MESH_POINT" != "true" -a "$WITH_MESH_POINT" != "false" ]; then
    read -p "Configure Mesh Point interface (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mMesh Point interface configuration will be skipped\e[0m"
        WITH_MESH_POINT=false
    else
        echo -e "\e[1;32mMesh Point interface will be configured\e[0m"
        WITH_MESH_POINT=true
    fi
fi
if [ "$WITH_MESH_POINT" == false ]; then
    if [ -z "$WITH_AD_HOC" -o "$WITH_AD_HOC" != "true" -a "$WITH_AD_HOC" != "false" ]; then
        read -p "Configure Ad-hoc interface (Y/n)? " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo -e "\e[1;31mAd-hoc interface configuration will be skipped\e[0m"
            WITH_AD_HOC=false
        else
            echo -e "\e[1;32mAd-hoc interface will be configured\e[0m"
            WITH_AD_HOC=true
        fi
    fi
else
    echo -e "\e[1;31mAd-hoc interface configuration will be skipped\e[0m"
    WITH_AD_HOC=false
fi

if [[ "$SUPPORT_HOSTAP" == "true" ]] && [ -z "$WITH_WIFI_AP" -o "$WITH_WIFI_AP" != "true" -a "$WITH_WIFI_AP" != "false" ]; then
    read -p "Configure WiFi Access Point (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mWiFi Access Point configuration will be skipped\e[0m"
        WITH_WIFI_AP=false
    else
        echo -e "\e[1;32mWiFi Access Point will be configured\e[0m"
        WITH_WIFI_AP=true
    fi
fi
if [ -z "$WITH_FIREWALL" -o "$WITH_FIREWALL" != "true" -a "$WITH_FIREWALL" != "false" ]; then
    read -p "Configure Basic Firewall (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mInternet Firewall will be skipped\e[0m"
        WITH_FIREWALL=false
    else
        echo -e "\e[1;32mInternet Firewall will be configured\e[0m"
        WITH_FIREWALL=true
    fi
fi
if [ -z "$WITH_CJDNS_IPTUNNEL" -o "$WITH_CJDNS_IPTUNNEL" != "true" -a "$WITH_CJDNS_IPTUNNEL" != "false" ]; then
    read -p "Configure Internet gateway (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mInternet gateway configuration will be skipped\e[0m"
        WITH_CJDNS_IPTUNNEL=false
    else
        echo -e "\e[1;32mInternet gateway will be configured\e[0m"
        WITH_CJDNS_IPTUNNEL=true
    fi
fi
if [ -z "$WITH_IPFS" -o "$WITH_IPFS" != "true" -a "$WITH_IPFS" != "false" ]; then
    read -p "Install IPFS (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mIPFS installation will be skipped\e[0m"
        WITH_IPFS=false
    else
        echo -e "\e[1;32mIPFS will be installed\e[0m"
        WITH_IPFS=true
    fi
fi
if [ "$WITH_IPFS" == true -a "$BOARD_FAMILY" == "Raspberry Pi" ]; then
    if [ -z "$WITH_IPFS_PI_STREAM" -o "$WITH_IPFS_PI_STREAM" != "true" -a "$WITH_IPFS_PI_STREAM" != "false" ]; then
        read -p "Install IPFS Pi stream (y/N)? " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "\e[1;32mIPFS Pi stream will be installed\e[0m"
            WITH_IPFS_PI_STREAM=true
        else
            echo -e "\e[1;31mIPFS Pi stream installation will be skipped\e[0m"
            WITH_IPFS_PI_STREAM=false
        fi
    fi
fi
if [ -z "$WITH_SSB" -o "$WITH_SSB" != "true" -a "$WITH_SSB" != "false" ]; then
    read -p "Install SSB (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mSSB installation will be skipped\e[0m"
        WITH_SSB=false
    else
        echo -e "\e[1;32mSSB will be installed\e[0m"
        WITH_SSB=true
    fi
fi
if [ -z "$WITH_SSB_WEB" -o "$WITH_SSB_WEB" != "true" -a "$WITH_SSB_WEB" != "false" ]; then
    read -p "Install SSB web client (Experimental) (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mSSB web client installation will be skipped\e[0m"
        WITH_SSB_WEB=false
    else
        echo -e "\e[1;32mSSB web client will be installed\e[0m"
        WITH_SSB_WEB=true
    fi
fi
if [ -z "$WITH_YRD" -o "$WITH_YRD" != "true" -a "$WITH_YRD" != "false" ]; then
    read -p "Install yrd (a cjdns command-line tool) (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31myrd installation will be skipped\e[0m"
        WITH_YRD=false
    else
        echo -e "\e[1;32myrd will be installed\e[0m"
        WITH_YRD=true
    fi
fi
if [ -z "$WITH_PROMETHEUS_NODE_EXPORTER" -o "$WITH_PROMETHEUS_NODE_EXPORTER" != "true" -a "$WITH_PROMETHEUS_NODE_EXPORTER" != "false" ]; then
    read -p "Install Prometheus Node Exporter (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mPrometheus Node Exporter installation will be skipped\e[0m"
        WITH_PROMETHEUS_NODE_EXPORTER=false
    else
        echo -e "\e[1;32mPrometheus Node Exporter will be installed\e[0m"
        WITH_PROMETHEUS_NODE_EXPORTER=true
    fi
fi
if [ "$WITH_PROMETHEUS_NODE_EXPORTER" == true ]; then
    if [ -z "$WITH_PROMETHEUS_SERVER" -o "$WITH_PROMETHEUS_SERVER" != "true" -a "$WITH_PROMETHEUS_SERVER" != "false" ]; then
        read -p "Install Prometheus Server (Y/n)? " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo -e "\e[1;31mPrometheus installation will be skipped\e[0m"
            WITH_PROMETHEUS_SERVER=false
        else
            echo -e "\e[1;32mPrometheus Server will be installed\e[0m"
            WITH_PROMETHEUS_SERVER=true
        fi
    fi
else
    # Skip because Prometheus Node Exporter is not installed
    WITH_PROMETHEUS_SERVER=false
fi
if [ "$WITH_PROMETHEUS_SERVER" == true ]; then
    if [ -z "$WITH_GRAFANA" -o "$WITH_GRAFANA" != "true" -a "$WITH_GRAFANA" != "false" ]; then
        read -p "Install Grafana (Y/n)? " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo -e "\e[1;31mGrafana installation will be skipped\e[0m"
            WITH_GRAFANA=false
        else
            echo -e "\e[1;32mGrafana will be installed\e[0m"
            WITH_GRAFANA=true
        fi
    fi
else
    # Skip because Prometheus Server is not installed
    WITH_GRAFANA=false
fi
if [ -z "$WITH_H_DNS" -o "$WITH_H_DNS" != "true" -a "$WITH_H_DNS" != "false" ]; then
    read -p "Configure Hyperboria-compatible Domain Name Servers (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mDNS settings will be skipped\e[0m"
        WITH_H_DNS=false
    else
        echo -e "\e[1;32mDNS settings will be configured\e[0m"
        WITH_H_DNS=true
    fi
fi
if [ -z "$WITH_H_NTP" -o "$WITH_H_NTP" != "true" -a "$WITH_H_NTP" != "false" ]; then
    read -p "Configure Hyperboria-compatible Network Time Protocol server (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mNTP settings will be skipped\e[0m"
        WITH_H_NTP=false
    else
        echo -e "\e[1;32mNTP settings will be configured\e[0m"
        WITH_H_NTP=true
    fi
fi
if [ -z "$WITH_EXTRA_TOOLS" -o "$WITH_EXTRA_TOOLS" != "true" -a "$WITH_EXTRA_TOOLS" != "false" ]; then
    read -p "Install non-essential tools useful for network analysis (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mExtra tools will be skipped\e[0m"
        WITH_EXTRA_TOOLS=false
    else
        echo -e "\e[1;32mExtra tools will be installed\e[0m"
        WITH_EXTRA_TOOLS=true
    fi
fi
if [[ "$SUPPORT_WATCHDOG" == "true" ]] && [ -z "$WITH_WATCHDOG" -o "$WITH_WATCHDOG" != "true" -a "$WITH_WATCHDOG" != "false" ]; then
    read -p "Configure Hardware Watchdog (Y/n)? " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1;31mHardware Watchdog configuration will be skipped\e[0m"
        WITH_WATCHDOG=false
    else
        echo -e "\e[1;32mHardware Watchdog will be configured\e[0m"
        WITH_WATCHDOG=true
    fi
fi

# Prompt for name of the mesh network
##TODO## This should be moved up to to mesh point question
read -p "Enter the name of your mesh network (default: tomesh): " -r
export MESH_NAME=`echo $REPLY | sed 's/ //g'`
if [ "${#MESH_NAME}" == 0 ]; then
    export MESH_NAME="tomesh"
fi

# Get tools
if ! [ "$(which nodejs)" ]; then
    # Check for armv6 and install nodejs manually instead since it will not install via repo
    if $(uname -m | grep -Eq ^armv6); then
        wget -O /tmp/node-v6.11.0-linux-armv6l.tar.gz https://nodejs.org/dist/v6.11.0/node-v6.11.0-linux-armv6l.tar.gz
        sudo tar xfz /tmp/node-v6.11.0-linux-armv6l.tar.gz --strip 1 -C /
        rm -rf /tmp/node-v6.11.0-linux-armv6l.tar.gz
        sudo ln -s /bin/node /bin/nodejs
    else
       curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
       sudo apt-get install nodejs -y
   fi
fi

# Install possibly missing tools
sudo apt-get install haveged -y

# Check if cjdns is to be compiled or downloaded
if [[ ! -e "/usr/bin/cjdroute" ]]; then
    if [ ! -z "$CJDNS_PACKAGE" ]; then
        read -p "Compile cjdns from source (Y) or use $CJDNS_PACKAGE Debian package (n)?" -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            CJDNS_PACKAGE="";
        fi
    fi
fi

if [ ! -z "$CJDNS_PACKAGE" ]; then
    echo -e "\e[1;31mInstalling cjdns Debian package\e[0m"
    wget https://github.com/darkdrgn2k/ToMeshStuff/raw/master/deb/$CJDNS_PACKAGE -O /tmp/cjdns.deb
    sudo dpkg -i /tmp/cjdns.deb
    #Link up folder so files are in the same place as compiled
    if [[ -e "/opt/cjdns" ]]; then 
        sudo rm -rf /opt/cjdns 
    fi
    sudo ln -s /usr/share/cjdns /opt/cjdns
    sudo ln -s /usr/bin/cjdroute /opt/cjdns/cjdroute
else
    # Download cjdns repo and checkout TAG_CJDNS tag
    echo -e "\e[1;31mCompiling cjdns from source\e[0m"
    if ! [ -d "/opt/cjdns" ]; then
        here=`pwd`
        sudo git clone https://github.com/cjdelisle/cjdns.git /opt/cjdns
        cd /opt/cjdns
        sudo git checkout $TAG_CJDNS
        cd $here
    fi

    # Build cjdns
    if ! [ -x "/opt/cjdns/cjdroute" ]; then
        here=`pwd`
        cd /opt/cjdns && eval $CJDNS_BUILD_CMD && cd $here
    fi

    # Install cjdns to /usr/bin
    sudo rm -f /usr/bin/cjdroute
    sudo cp /opt/cjdns/cjdroute /usr/bin/cjdroute

    # Generate cjdns configurations
    if ! [ -f "/etc/cjdroute.conf" ]; then
        sudo /usr/bin/cjdroute --genconf | sudo tee --append /etc/cjdroute.conf > /dev/null
    fi

    # Configure systemd to start cjdns.service on system boot
    sudo cp /opt/cjdns/contrib/systemd/cjdns.service /etc/systemd/system/cjdns.service
    sudo chmod 644 /etc/systemd/system/cjdns.service
    sudo cp /opt/cjdns/contrib/systemd/cjdns-resume.service /etc/systemd/system/cjdns-resume.service
    sudo chmod 644 /etc/systemd/system/cjdns-resume.service
    sudo systemctl daemon-reload
fi

sudo systemctl enable cjdns.service

# 802.11s Mesh Point interface
if [ ! -z "$WITH_MESH_POINT" -a "$WITH_MESH_POINT" == "true" ]; then
    source mesh-point/install
fi

# IBSS Ad-hoc interface
if [ ! -z "$WITH_AD_HOC" -a "$WITH_AD_HOC" == "true" ]; then
    source mesh-adhoc/install
fi

# WiFi Access Point on supported boards
if [[ "$SUPPORT_HOSTAP" == "true" ]] && [ ! -z "$WITH_WIFI_AP" -a "$WITH_WIFI_AP" == "true" ]; then
    source hostapd/install
fi

# Configure Internet firewall
if [ ! -z "$WITH_FIREWALL" -a "$WITH_FIREWALL" == "true" ]; then
    source firewall/install
fi

# Configure Internet gateway using cjdns iptunnel
if [ ! -z "$WITH_CJDNS_IPTUNNEL" -a "$WITH_CJDNS_IPTUNNEL" == "true" ]; then
    source cjdns-iptunnel/install
fi

# IPFS
if [ ! -x "$(command -v ipfs)" ] && [ ! -z "$WITH_IPFS" -a "$WITH_IPFS" == "true" ]; then
    source ipfs/install
fi
# IPFS Pi Stream
if [ ! -x "$(command -v process-stream.sh)" ] && [ ! -z "$WITH_IPFS_PI_STREAM" -a "$WITH_IPFS_PI_STREAM" == "true" ]; then
    source ipfs-pi-stream/install
fi
# SSB
if [ ! -x "$(command -v sbot)" ] && [ ! -z "$WITH_SSB" -a "$WITH_SSB" == "true" ]; then
    source ssb/install
fi

# SSB Web (logic inverted. Install if sbot exists only)
if [ -x "$(command -v sbot)" ] && [ ! -z "$WITH_SSB_WEB" -a "$WITH_SSB_WEB" == "true" ]; then
    source ssb-web/install
fi

# yrd
if [ ! -x "$(command -v yrd)" ] && [ ! -z "$WITH_YRD" -a "$WITH_YRD" == "true" ]; then
    source yrd/install
fi
# Prometheus Node Exporter
if [ ! -x "$(command -v node_exporter)" ] && [ ! -z "$WITH_PROMETHEUS_NODE_EXPORTER" -a "$WITH_PROMETHEUS_NODE_EXPORTER" == "true" ]; then
    source prometheus-node-exporter/install
fi

# Prometheus Server
if [ ! -x "$(command -v /opt/prometheus/prometheus)" ] && [ ! -z "$WITH_PROMETHEUS_SERVER" -a "$WITH_PROMETHEUS_SERVER" == "true" ]; then
    source prometheus-server/install
fi

# Grafana
if [ ! -x "$(command -v /usr/sbin/grafana-server)" ] && [ ! -z "$WITH_GRAFANA" -a "$WITH_GRAFANA" == "true" ]; then
    source grafana/install
fi

# Configure Hyperboria DNS
if [ ! -z "$WITH_H_DNS" -a "$WITH_H_DNS" == "true" ]; then
    source h-dns/install
fi

# Configure Hyperboria NTP
if [ ! -z "$WITH_H_NTP" -a "$WITH_H_NTP" == "true" ]; then
    source h-ntp/install
fi

# Non-essential extra tools
if [ ! -z "$WITH_EXTRA_TOOLS" -a "$WITH_EXTRA_TOOLS" == "true" ]; then
    source extra-tools/install
fi

# Watchdog on supported boards
if [[ "$SUPPORT_WATCHDOG" == "true" ]] && [ ! -z "$WITH_WATCHDOG" -a "$WITH_WATCHDOG" == "true" ]; then
    source watchdog/install
fi

# Install node status script
sudo cp status /usr/local/bin/status
echo -e "Run \e[1;32mstatus\e[0m anytime to print the status of your node"

# Print node status on login
cp ~/.profile ~/.bash_profile
echo "" >> ~/.bash_profile
echo "# export mesh network name" >> ~/.bash_profile
echo "export MESH_NAME=$MESH_NAME" >> ~/.bash_profile
echo "" >> ~/.bash_profile 
echo "# print mesh node status" >> ~/.bash_profile
echo "status" >> ~/.bash_profile

# Rename node based on cjdns address
oldhostname=$(hostname)
newhostname=$(sudo grep -m 1 '"ipv6"' /etc/cjdroute.conf | awk '{ print $2 }' | sed 's/[",]//g' | sed "s/.*:/$MESH_NAME-/g")
sudo echo $newhostname | sudo tee /etc/hostname > /dev/null
sudo sed -i -e "s/$oldhostname/$newhostname/" /etc/hosts

echo -e "Your node's new hostname is $newhostname"

read -p "Installation complete. Press any key to reboot your new node. " -n 1 -r

# Reboot device
sudo reboot
